// Generated by CoffeeScript 1.10.0
define(['external/react', 'jquery', 'modules/core/i18n', 'modules/clean/react/sprite'], function(React, $j, i18n, Sprite) {
  var PreviewImageAnnotationsToolbar, TOOLBAR_HIDE_DELAY, _, cx, d;
  cx = React.addons.classSet;
  d = React.DOM;
  _ = i18n._;
  TOOLBAR_HIDE_DELAY = 3000;
  return PreviewImageAnnotationsToolbar = React.createClass({
    displayName: "PreviewImageAnnotationsToolbar",
    propTypes: {
      index: React.PropTypes.number.isRequired,
      count: React.PropTypes.number.isRequired,
      onPrevious: React.PropTypes.func,
      onNext: React.PropTypes.func,
      onFullscreen: React.PropTypes.func
    },
    getInitialState: function() {
      return {
        isToolbarVisible: false
      };
    },
    componentWillMount: function() {
      return window.addEventListener('mousemove', this._onMouseMove);
    },
    componentWillUnmount: function() {
      window.removeEventListener('mousemove', this._onMouseMove);
      return clearTimeout(this.hideToolbarTimeout);
    },
    _onMouseMove: function(event) {
      if (!this.state.isToolbarVisible) {
        this.setState({
          isToolbarVisible: true
        });
      }
      if (this.state.isToolbarVisible) {
        clearTimeout(this.hideToolbarTimeout);
        return this.hideToolbarTimeout = setTimeout((function(_this) {
          return function() {
            return _this._maybeHideToolbar(event);
          };
        })(this), TOOLBAR_HIDE_DELAY);
      }
    },
    _maybeHideToolbar: function(event) {
      if ($j(event.target).closest(this.refs.previewToolbar.getDOMNode()).length === 0) {
        return this.setState({
          isToolbarVisible: false
        });
      }
    },
    _canFlipPrevious: function() {
      return this.props.index > 0;
    },
    _canFlipNext: function() {
      return this.props.index + 1 < this.props.count;
    },
    _flipLabelText: function() {
      return _("%(cur_file_num)s of %(num_total_files)s").format({
        cur_file_num: this.props.index + 1,
        num_total_files: this.props.count
      });
    },
    render: function() {
      var flipNextClassSet, flipPreviousClassSet;
      if (!this.state.isToolbarVisible) {
        return false;
      }
      flipNextClassSet = {
        "flip-button": true,
        "flip-button--next": this._canFlipNext()
      };
      flipPreviousClassSet = {
        "flip-button": true,
        "flip-button--previous": this._canFlipPrevious()
      };
      return d.div({
        className: "preview-toolbar-overlay-container"
      }, d.div({
        className: "preview-toolbar-overlay",
        ref: "previewToolbar"
      }, d.div({
        className: "preview-toolbar-content"
      }, this.props.count > 1 && (this.props.onPrevious != null) && (this.props.onNext != null) ? d.span({
        className: "flip-buttons"
      }, d.div({
        className: cx(flipPreviousClassSet),
        onClick: this.props.onPrevious
      }, Sprite({
        group: "web",
        name: "s_flip_left"
      })), d.div({
        className: "flip-label"
      }, this._flipLabelText()), d.div({
        className: cx(flipNextClassSet),
        onClick: this.props.onNext
      }, Sprite({
        group: "web",
        name: "s_flip_right"
      }))) : void 0, this.props.onFullscreen != null ? d.div({
        className: "fullscreen",
        onClick: this.props.onFullscreen
      }, Sprite({
        group: "web",
        name: "fullscreen"
      }), d.span({
        className: "fullscreen-label"
      }, _("Fullscreen"))) : void 0)));
    }
  });
});

//# sourceMappingURL=preview_image_annotations_toolbar.js.map
