// Generated by CoffeeScript 1.10.0
define(['jquery', 'modules/clean/ajax'], function($j, ajax) {
  var FilePreview, FileRevision, FileRevisionsIterator, REVISIONS_PER_PAGE, deserializeFileRevision;
  REVISIONS_PER_PAGE = 50;
  FileRevision = (function() {
    function FileRevision(arg) {
      this.filePreview = arg.filePreview;
    }

    return FileRevision;

  })();
  FilePreview = (function() {
    function FilePreview(arg) {
      this.sjid = arg.sjid;
    }

    return FilePreview;

  })();
  deserializeFileRevision = function(json) {
    return new FileRevision({
      filePreview: new FilePreview({
        sjid: json.preview_info.sjid
      })
    });
  };
  FileRevisionsIterator = (function() {
    function FileRevisionsIterator(fqPath, userId, options) {
      this.fqPath = fqPath;
      this.userId = userId;
      if (options == null) {
        options = {};
      }
      this.cursor = options.initialCursor || null;
      this.deserializer = options.deserializer || deserializeFileRevision;
    }

    FileRevisionsIterator.prototype.next = function() {
      var data, deferred;
      deferred = new $j.Deferred();
      data = {
        path: this.fqPath,
        limit: REVISIONS_PER_PAGE
      };
      if (this.cursor) {
        data.cursor = this.cursor;
      }
      ajax.WebRequest({
        url: '/file_revisions',
        type: 'GET',
        subject_user: this.userId,
        data: data,
        success: (function(_this) {
          return function(response) {
            var revision, revisions;
            data = JSON.parse(response);
            _this.cursor = data.cursor;
            revisions = (function() {
              var i, len, ref, results;
              ref = data.revisions;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                revision = ref[i];
                results.push(this.deserializer(revision));
              }
              return results;
            }).call(_this);
            return deferred.resolve({
              revisions: revisions,
              hasMore: data.more
            });
          };
        })(this),
        error: function(response) {
          return deferred.reject({
            errorText: response.error_text
          });
        }
      });
      return deferred.promise();
    };

    return FileRevisionsIterator;

  })();
  return FileRevisionsIterator;
});

//# sourceMappingURL=file_revisions_iterator.js.map
