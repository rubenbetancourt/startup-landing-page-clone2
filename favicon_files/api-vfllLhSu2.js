// Generated by CoffeeScript 1.10.0
define(['modules/clean/ajax', 'modules/core/exception', 'jquery'], function(arg, arg1, $j) {
  var FormWebRequest, SharingApi, UserlessSharingApi, WebRequest, assert;
  WebRequest = arg.WebRequest, FormWebRequest = arg.FormWebRequest;
  assert = arg1.assert;
  SharingApi = (function() {
    SharingApi.REQUEST_SUCCEEDED_EVENT = 'db:sharing_api:request_succeeded';

    function SharingApi(user) {
      this.user = user;
    }

    SharingApi.prototype.invite_more_to_folder = function(ns_id, recipients, custom_message, access_type, success_cb, failure_cb) {
      var params;
      params = {
        ns_id: ns_id,
        emails: recipients.emails || [],
        fb_ids: recipients.fb_ids || [],
        group_ids: recipients.group_ids || [],
        new_style_group_ids: recipients.new_style_group_ids || [],
        custom_message: custom_message || "",
        access_type: access_type
      };
      return this._make_request('/share_ajax/invite_more', params, success_cb, failure_cb, true);
    };

    SharingApi.prototype.update_member_access_type = function(ns_id, member_uid, access_type, success_cb, failure_cb) {
      var params;
      params = {
        ns_id: ns_id,
        member_uid: member_uid,
        access_type: access_type
      };
      return this._make_request('/share_ajax/update_member_access_type', params, success_cb, failure_cb);
    };

    SharingApi.prototype.update_team_folder_access_type = function(ns_id, can_edit, success_cb, failure_cb) {
      var params;
      params = {
        ns_id: ns_id,
        can_edit: can_edit
      };
      return this._make_request('/team/admin/team_folder/update_access_type', params, success_cb, failure_cb, true, false);
    };

    SharingApi.prototype.update_invite_access_type = function(invite_id, access_type, success_cb, failure_cb) {
      var params;
      params = {
        invite_id: invite_id,
        access_type: access_type
      };
      return this._make_request('/share_ajax/update_invite_access_type', params, success_cb, failure_cb);
    };

    SharingApi.prototype.share_folder = function(is_new_folder, folder_name_or_path, recipients, custom_message, audience, inviter, shared_link_policy, access_type, ignore_recipients, success_cb, failure_cb) {
      var params, route;
      params = {
        emails: recipients.emails || [],
        fb_ids: recipients.fb_ids || [],
        group_ids: recipients.group_ids || [],
        new_style_group_ids: recipients.new_style_group_ids || [],
        custom_message: custom_message || "",
        audience: audience,
        inviter: inviter,
        shared_link_policy: shared_link_policy,
        access_type: access_type,
        folder_settings: 1
      };
      if (is_new_folder) {
        params.folder_name = folder_name_or_path;
        route = '/share_ajax/new';
      } else {
        params.path = folder_name_or_path;
        route = ignore_recipients ? '/share_ajax/existing_no_recipient' : '/share_ajax/existing';
      }
      if (audience || inviter) {
        params.custom_folder_settings = 1;
      }
      return this._make_request(route, params, success_cb, failure_cb, true);
    };

    SharingApi.prototype.share_path = function(path, recipients, custom_message, audience, inviter, shared_link_policy, access_type, ignore_recipients, success_cb, failure_cb) {
      var params, route;
      params = {
        emails: recipients.emails || [],
        fb_ids: recipients.fb_ids || [],
        group_ids: recipients.group_ids || [],
        new_style_group_ids: recipients.new_style_group_ids || [],
        custom_message: custom_message || "",
        audience: audience,
        inviter: inviter,
        shared_link_policy: shared_link_policy,
        access_type: access_type,
        folder_settings: 1,
        path: path
      };
      route = '/share_ajax/new_path';
      if (audience || inviter) {
        params.custom_folder_settings = 1;
      }
      return this._make_request(route, params, success_cb, failure_cb, true);
    };

    SharingApi.prototype.unshare_folder = function(ns_id, keep_files, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        async: true
      };
      if (keep_files) {
        params.keep_files = true;
      }
      return this._make_request('/share_ajax/unshare?long_running', params, success_cb);
    };

    SharingApi.prototype.leave_folder = function(ns_id, keep_files, success_cb) {
      var params;
      params = {
        ns_id: ns_id
      };
      if (keep_files) {
        params.keep_files = true;
      }
      return this._make_request('/share_ajax/leave?long_running', params, success_cb);
    };

    SharingApi.prototype.transfer_ownership = function(ns_id, user_id, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        user_id: user_id
      };
      return this._make_request('/share_ajax/change_sf_owner', params, success_cb);
    };

    SharingApi.prototype.cancel_invite = function(ns_id, invite_id, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        invite_id: invite_id
      };
      return this._make_request('/share_ajax/cancel_invite', params, success_cb);
    };

    SharingApi.prototype.kick = function(ns_id, user_id, keep_files, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        user_id: user_id
      };
      if (keep_files) {
        params.keep_files = true;
      }
      return this._make_request('/share_ajax/kick_user', params, success_cb);
    };

    SharingApi.prototype.reinvite_user = function(ns_id, invite_id, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        invite_id: invite_id
      };
      return this._make_request('/share_ajax/reinvite_user', params, success_cb);
    };

    SharingApi.prototype.update_sf_permissions = function(ns_id, new_permission, success_cb, failure_cb) {
      var params;
      params = {
        ns_id: ns_id,
        new_permissions: new_permission
      };
      return this._make_request('/share_ajax/change_sf_perm', params, success_cb, failure_cb);
    };

    SharingApi.prototype.update_sf_team_permissions = function(ns_id, audience, inviter, shared_link_policy, activity_feed_enabled, success_cb) {
      var params;
      params = {
        ns_id: ns_id,
        audience: audience,
        inviter: inviter,
        shared_link_policy: shared_link_policy
      };
      if (!(activity_feed_enabled === void 0)) {
        params['activity_feed_enabled'] = activity_feed_enabled;
      }
      return this._make_request('/share_ajax/save_folder_settings', params, success_cb);
    };

    SharingApi.prototype.validate_new_sf_path = function(folder_name, success_cb, failure_cb) {
      var params;
      params = {
        share_type: 'new',
        folder_name: folder_name
      };
      return this._make_request('/share_ajax/validate_folder', params, success_cb, failure_cb, true);
    };

    SharingApi.prototype.validate_existing_sf_path = function(folder_name, success_cb, failure_cb) {
      var params;
      params = {
        share_type: 'existing',
        path: folder_name
      };
      return this._make_request('/share_ajax/validate_folder', params, success_cb, failure_cb, true);
    };

    SharingApi.prototype._make_request = function(url, params, success_cb, failure_cb, suppress_default_notifications, send_subject_uid) {
      var ajax_options, ref, request_fn;
      if (suppress_default_notifications == null) {
        suppress_default_notifications = false;
      }
      if (send_subject_uid == null) {
        send_subject_uid = true;
      }
      ajax_options = {
        url: url,
        data: params,
        success: function(data, statusText, jqXHR) {
          if (typeof success_cb === "function") {
            success_cb(jqXHR);
          }
          return $j(document).trigger(SharingApi.REQUEST_SUCCEEDED_EVENT, {
            request_url: url,
            ns_id: params.ns_id || null
          });
        },
        error: function(jqXHR) {
          return typeof failure_cb === "function" ? failure_cb(jqXHR) : void 0;
        },
        complete: (function(_this) {
          return function() {
            var ref;
            return (ref = _this.loading_elem) != null ? ref.removeClass('ajax-loading') : void 0;
          };
        })(this)
      };
      if (send_subject_uid) {
        ajax_options.subject_user = this.user.id;
      }
      if ((ref = this.loading_elem) != null) {
        ref.addClass('ajax-loading');
      }
      request_fn = suppress_default_notifications ? FormWebRequest : WebRequest;
      return request_fn(ajax_options);
    };

    return SharingApi;

  })();
  UserlessSharingApi = (function() {
    function UserlessSharingApi() {}

    UserlessSharingApi.prototype.get_inbox_counts = function(success_cb) {
      return new WebRequest({
        url: '/inbox_count',
        success: function(data, statusText, jqXHR) {
          var counts;
          counts = JSON.parse(jqXHR.responseText);
          assert(typeof counts === 'object', "bad inbox_count");
          return success_cb(counts);
        }
      });
    };

    UserlessSharingApi.prototype.get_folder_info = function(success_cb, failure_cb) {
      return new WebRequest({
        url: '/share_ajax/list_folders',
        success: function(data, statusText, jqXHR) {
          return typeof success_cb === "function" ? success_cb(jqXHR) : void 0;
        },
        error: function(jqXHR) {
          return typeof failure_cb === "function" ? failure_cb(jqXHR) : void 0;
        }
      });
    };

    return UserlessSharingApi;

  })();
  return {
    SharingApi: SharingApi,
    UserlessSharingApi: UserlessSharingApi
  };
});

//# sourceMappingURL=api.js.map
