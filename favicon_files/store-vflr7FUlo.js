// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['modules/clean/flux/flux_store', 'modules/clean/react/file_viewer/constants', 'modules/clean/react/file_viewer/dispatcher', 'modules/clean/react/file_viewer/utils'], function(FluxStore, arg, fileViewerDispatcher, arg1) {
  var ActionTypes, FileViewerStore, FlippableHelpers;
  ActionTypes = arg.ActionTypes;
  FlippableHelpers = arg1.FlippableHelpers;
  FileViewerStore = (function(superClass) {
    extend(FileViewerStore, superClass);

    function FileViewerStore(dispatcher) {
      FileViewerStore.__super__.constructor.call(this, dispatcher);
      this._files = [];
      this._currentIndex = 0;
      this._user = null;
      this._isFullscreen = false;
      this._isCommentsHidden = false;
    }

    FileViewerStore.prototype.files = function() {
      return this._files;
    };

    FileViewerStore.prototype.currentIndex = function() {
      return this._currentIndex;
    };

    FileViewerStore.prototype.user = function() {
      return this._user;
    };

    FileViewerStore.prototype.isFullscreen = function() {
      return this._isFullscreen;
    };

    FileViewerStore.prototype.isCommentsHidden = function() {
      return this._isCommentsHidden;
    };

    FileViewerStore.prototype.currentFile = function() {
      return this._files[this._currentIndex];
    };

    FileViewerStore.prototype._setup = function(arg2) {
      var currentIndex, files, user;
      files = arg2.files, currentIndex = arg2.currentIndex, user = arg2.user;
      this._user = user;
      return this._updateFiles(files, files[currentIndex]);
    };

    FileViewerStore.prototype._updateFiles = function(files, currentFile) {
      if (!FlippableHelpers.isFlippableFile(currentFile)) {
        this._files = [currentFile];
        this._currentIndex = 0;
      } else {
        this._files = FlippableHelpers.filterFlippableFiles(files);
        this._currentIndex = this._getFileIndex(this._files, currentFile);
      }
      return this.__emitChange();
    };

    FileViewerStore.prototype._cleanup = function() {
      this._files = [];
      this._currentIndex = 0;
      this._user = null;
      return this._isFullscreen = false;
    };

    FileViewerStore.prototype._nextFile = function() {
      this._currentIndex = (this._currentIndex === this._files.length - 1 ? 0 : this._currentIndex + 1);
      return this.__emitChange();
    };

    FileViewerStore.prototype._previousFile = function() {
      this._currentIndex = (this._currentIndex === 0 ? this._files.length - 1 : this._currentIndex - 1);
      return this.__emitChange();
    };

    FileViewerStore.prototype._setIsFullscreen = function(isFullscreen) {
      this._isFullscreen = isFullscreen;
      return this.__emitChange();
    };

    FileViewerStore.prototype._setIsCommentsHidden = function(isCommentsHidden) {
      this._isCommentsHidden = isCommentsHidden;
      return this.__emitChange();
    };

    FileViewerStore.prototype._getFileIndex = function(files, targetFile) {
      var file, i, j, len;
      for (i = j = 0, len = files.length; j < len; i = ++j) {
        file = files[i];
        if (targetFile.sjid === file.sjid) {
          return i;
        }
      }
      return -1;
    };

    FileViewerStore.prototype.__onDispatch = function(payload) {
      switch (payload.action.type) {
        case ActionTypes.SETUP:
          return this._setup(payload.action.data);
        case ActionTypes.CLEANUP:
          return this._cleanup();
        case ActionTypes.UPDATE_FILES:
          return this._updateFiles(payload.action.data.files, this.currentFile());
        case ActionTypes.FLIP_NEXT:
          return this._nextFile();
        case ActionTypes.FLIP_PREVIOUS:
          return this._previousFile();
        case ActionTypes.OPEN_FULLSCREEN:
          return this._setIsFullscreen(true);
        case ActionTypes.CLOSE_FULLSCREEN:
          return this._setIsFullscreen(false);
        case ActionTypes.OPEN_COMMENTS:
          return this._setIsCommentsHidden(false);
        case ActionTypes.CLOSE_COMMENTS:
          return this._setIsCommentsHidden(true);
      }
    };

    return FileViewerStore;

  })(FluxStore);
  return new FileViewerStore(fileViewerDispatcher);
});

//# sourceMappingURL=store.js.map
